use std::rc::Rc;

use na::{Point3, Vector3};

use crate::client::resources;
use crate::engine::model::{Model, VertexData, VertexDataLayoutInfo};
use crate::engine::texture::{ImageFileFormat, Texture, TextureCoordinate};
use crate::engine::SceneObject;
use crate::world::block::{Block, NON_EMPTY_BLOCKS_COUNT};
use crate::world::chunk::{Chunk, ChunkIndex, CHUNK_DEPTH, CHUNK_HEIGHT, CHUNK_WIDTH};
use crate::world::cube::CubeFace;

const EPS: f32 = 0.000001;

/// Generates renderable meshes from chunks.
///
/// It is recommended that one `MeshGenerator` be used for all mesh generation, rather than creating
/// a new object for each mesh to generate, because doing so will enable it to reuse its block
/// texture across all chunks.
pub struct MeshGenerator {
    blocks_texture: Rc<Texture>,
}

impl MeshGenerator {
    pub(crate) fn new() -> Self {
        MeshGenerator {
            blocks_texture: Rc::new(Texture::new(
                resources::cubes_texture(),
                ImageFileFormat::Png,
            )),
        }
    }

    /// Compute a renderable mesh from the blocks in a chunk.
    ///
    /// This function omits any faces that wouldn't be externally visible. If two blocks are adjacent,
    /// then it'll elide the two faces that are touching each other, since there's no way they could be
    /// seen.
    ///
    /// The structure generated by this function will need to be rebuild whenever a block is modified.
    ///
    /// TODO: Cull more aggressively (only emit the 3D convex hull) for chunks that the player's not currently in
    ///
    /// TODO: Also don't emit if there is still a block there in another chunk
    pub(crate) fn chunk_to_scene_object(
        &self,
        chunk: &Chunk,
        chunk_index: ChunkIndex,
    ) -> SceneObject {
        let mut vertex_buffer: Vec<f32> = vec![];
        let mut index_buffer: Vec<u32> = vec![];

        for x in 0..CHUNK_WIDTH as i32 {
            for y in 0..CHUNK_HEIGHT as i32 {
                for z in 0..CHUNK_DEPTH as i32 {
                    if !chunk.has_block_at(x, y, z) {
                        continue;
                    }
                    let block = chunk.get_block_at(x as usize, y as usize, z as usize);

                    if !chunk.has_block_at(x + 1, y, z) {
                        emit_pos_x_face(
                            block,
                            x as f32,
                            y as f32,
                            z as f32,
                            &mut vertex_buffer,
                            &mut index_buffer,
                        );
                    }

                    if !chunk.has_block_at(x - 1, y, z) {
                        emit_neg_x_face(
                            block,
                            x as f32,
                            y as f32,
                            z as f32,
                            &mut vertex_buffer,
                            &mut index_buffer,
                        );
                    }

                    if !chunk.has_block_at(x, y + 1, z) {
                        emit_pos_y_face(
                            block,
                            x as f32,
                            y as f32,
                            z as f32,
                            &mut vertex_buffer,
                            &mut index_buffer,
                        );
                    }

                    if !chunk.has_block_at(x, y - 1, z) {
                        emit_neg_y_face(
                            block,
                            x as f32,
                            y as f32,
                            z as f32,
                            &mut vertex_buffer,
                            &mut index_buffer,
                        );
                    }

                    if !chunk.has_block_at(x, y, z + 1) {
                        emit_pos_z_face(
                            block,
                            x as f32,
                            y as f32,
                            z as f32,
                            &mut vertex_buffer,
                            &mut index_buffer,
                        );
                    }

                    if !chunk.has_block_at(x, y, z - 1) {
                        emit_neg_z_face(
                            block,
                            x as f32,
                            y as f32,
                            z as f32,
                            &mut vertex_buffer,
                            &mut index_buffer,
                        );
                    }
                }
            }
        }

        let model_layout_info = VertexDataLayoutInfo {
            position_offset: 0,
            normal_offset: Some(3),
            texture_offset: Some(6),
        };
        let vertices = VertexData::new(
            vertex_buffer.as_slice(),
            index_buffer.as_slice(),
            model_layout_info,
        );

        let model = Model {
            vertices,
            texture: self.blocks_texture.clone(),
        };

        let chunk_x = (chunk_index.i * CHUNK_WIDTH as i32) as f32;
        let chunk_y = 0.0;
        let chunk_z = (chunk_index.j * CHUNK_DEPTH as i32) as f32;
        let position = Point3::new(chunk_x, chunk_y, chunk_z);

        let orientation = Vector3::new(0.0, 0.0, 0.0);
        let scale = 1.0;

        SceneObject {
            position,
            orientation,
            scale,
            model,
        }
    }
}

#[inline]
fn emit_pos_x_face(
    block: Block,
    x: f32,
    y: f32,
    z: f32,
    vertex_buffer: &mut Vec<f32>,
    index_buffer: &mut Vec<u32>,
) {
    let normal = Vector3::new(1.0, 0.0, 0.0);
    let points = [
        Point3::new(x + 1.0, y + 1.0, z + 1.0),
        Point3::new(x + 1.0, y + 0.0, z + 1.0),
        Point3::new(x + 1.0, y + 0.0, z + 0.0),
        Point3::new(x + 1.0, y + 1.0, z + 0.0),
    ];

    emit_face(
        &points,
        normal,
        block,
        CubeFace::Right,
        vertex_buffer,
        index_buffer,
    );
}

#[inline]
fn emit_neg_x_face(
    block: Block,
    x: f32,
    y: f32,
    z: f32,
    vertex_buffer: &mut Vec<f32>,
    index_buffer: &mut Vec<u32>,
) {
    let normal = Vector3::new(-1.0, 0.0, 0.0);
    let points = [
        Point3::new(x, y + 1.0, z),
        Point3::new(x, y, z),
        Point3::new(x, y, z + 1.0),
        Point3::new(x, y + 1.0, z + 1.0),
    ];

    emit_face(
        &points,
        normal,
        block,
        CubeFace::Left,
        vertex_buffer,
        index_buffer,
    );
}

#[inline]
fn emit_pos_y_face(
    block: Block,
    x: f32,
    y: f32,
    z: f32,
    vertex_buffer: &mut Vec<f32>,
    index_buffer: &mut Vec<u32>,
) {
    let normal = Vector3::new(0.0, 1.0, 0.0);
    let points = [
        Point3::new(x, y + 1.0, z),
        Point3::new(x, y + 1.0, z + 1.0),
        Point3::new(x + 1.0, y + 1.0, z + 1.0),
        Point3::new(x + 1.0, y + 1.0, z),
    ];

    emit_face(
        &points,
        normal,
        block,
        CubeFace::Top,
        vertex_buffer,
        index_buffer,
    );
}

#[inline]
fn emit_neg_y_face(
    block: Block,
    x: f32,
    y: f32,
    z: f32,
    vertex_buffer: &mut Vec<f32>,
    index_buffer: &mut Vec<u32>,
) {
    let normal = Vector3::new(0.0, -1.0, 0.0);
    let points = [
        Point3::new(x, y, z + 1.0),
        Point3::new(x, y, z),
        Point3::new(x + 1.0, y, z),
        Point3::new(x + 1.0, y, z + 1.0),
    ];

    emit_face(
        &points,
        normal,
        block,
        CubeFace::Bottom,
        vertex_buffer,
        index_buffer,
    );
}

#[inline]
fn emit_pos_z_face(
    block: Block,
    x: f32,
    y: f32,
    z: f32,
    vertex_buffer: &mut Vec<f32>,
    index_buffer: &mut Vec<u32>,
) {
    let normal = Vector3::new(0.0, 0.0, 1.0);
    let points = [
        Point3::new(x + 0.0, y + 1.0, z + 1.0),
        Point3::new(x + 0.0, y + 0.0, z + 1.0),
        Point3::new(x + 1.0, y + 0.0, z + 1.0),
        Point3::new(x + 1.0, y + 1.0, z + 1.0),
    ];

    emit_face(
        &points,
        normal,
        block,
        CubeFace::Front,
        vertex_buffer,
        index_buffer,
    );
}

#[inline]
fn emit_neg_z_face(
    block: Block,
    x: f32,
    y: f32,
    z: f32,
    vertex_buffer: &mut Vec<f32>,
    index_buffer: &mut Vec<u32>,
) {
    let normal = Vector3::new(0.0, 0.0, -1.0);
    let points = [
        Point3::new(x + 1.0, y + 1.0, z),
        Point3::new(x + 1.0, y, z),
        Point3::new(x, y, z),
        Point3::new(x, y + 1.0, z),
    ];

    emit_face(
        &points,
        normal,
        block,
        CubeFace::Back,
        vertex_buffer,
        index_buffer,
    );
}

/// Create a face for a cube
fn emit_face(
    points: &[Point3<f32>; 4],
    normal: Vector3<f32>,
    block: Block,
    face: CubeFace,
    vertex_buffer: &mut Vec<f32>,
    index_buffer: &mut Vec<u32>,
) {
    let index = (vertex_buffer.len() as u32) / 8;
    let (tex_coords_start, tex_coords_end) = get_texture_coordinates(block, face);

    vertex_buffer.extend_from_slice(&[
        points[0].x,
        points[0].y,
        points[0].z,
        normal.x,
        normal.y,
        normal.z,
        tex_coords_start.u,
        tex_coords_start.v,
    ]);

    vertex_buffer.extend_from_slice(&[
        points[1].x,
        points[1].y,
        points[1].z,
        normal.x,
        normal.y,
        normal.z,
        tex_coords_start.u,
        tex_coords_end.v,
    ]);

    vertex_buffer.extend_from_slice(&[
        points[2].x,
        points[2].y,
        points[2].z,
        normal.x,
        normal.y,
        normal.z,
        tex_coords_end.u,
        tex_coords_end.v,
    ]);

    vertex_buffer.extend_from_slice(&[
        points[3].x,
        points[3].y,
        points[3].z,
        normal.x,
        normal.y,
        normal.z,
        tex_coords_end.u,
        tex_coords_start.v,
    ]);

    index_buffer.extend_from_slice(&[index, index + 1, index + 2, index + 2, index + 3, index]);
}

#[inline]
pub(crate) fn get_texture_coordinates(
    block: Block,
    cube_face: CubeFace,
) -> (TextureCoordinate, TextureCoordinate) {
    let u_index = match cube_face {
        CubeFace::Top => 0,
        CubeFace::Bottom => 1,
        CubeFace::Front => 2,
        CubeFace::Back => 3,
        CubeFace::Left => 4,
        CubeFace::Right => 5,
    };

    // TODO: Update this once we've added more textures
    let v_index = match block {
        Block::Grass => 0,
        Block::Dirt => 0,
        Block::Stone => 0,

        _ => 0,
    };

    let u_start = (u_index as f32) / 6.0;
    let v_start = (v_index as f32) / (NON_EMPTY_BLOCKS_COUNT as f32);
    let start_coords = TextureCoordinate {
        u: u_start + EPS,
        v: v_start + EPS,
    };

    let u_end = u_start + 1.0 / 6.0;
    let v_end = v_start + (1.0 / (NON_EMPTY_BLOCKS_COUNT as f32));
    let end_coords = TextureCoordinate {
        u: u_end - EPS,
        v: v_end - EPS,
    };

    (start_coords, end_coords)
}
